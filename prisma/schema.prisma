generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
  
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Main application models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  phone         String?
  emailVerified DateTime?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts     Account[]
  sessions     Session[]
  stores       Store[]
  orders       Order[]
  transactions Transaction[]
  messages     Message[]
  wallet       Wallet?
  referrals    Referral[]

  @@map("users")
}

model Store {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String?
  logo        String?
  banner      String?
  status      StoreStatus @default(ACTIVE)
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  products     Product[]
  orders       Order[]
  customers    Customer[]
  coupons      Coupon[]
  analytics    Analytics[]
  deliveryInfo DeliveryInfo?

  @@map("stores")
}

model Product {
  id          String        @id @default(cuid())
  name        String
  slug        String
  description String?
  price       Decimal       @db.Decimal(10, 2)
  comparePrice Decimal?     @db.Decimal(10, 2)
  images      String[]
  status      ProductStatus @default(ACTIVE)
  inventory   Int           @default(0)
  categoryId  String?
  storeId     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  store    Store        @relation(fields: [storeId], references: [id], onDelete: Cascade)
  category Category?    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]

  @@unique([slug, storeId])
  @@map("products")
}

model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  store  Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("customers")
}

model Order {
  id           String      @id @default(cuid())
  orderNumber  String      @unique
  status       OrderStatus @default(PENDING)
  total        Decimal     @db.Decimal(10, 2)
  subtotal     Decimal     @db.Decimal(10, 2)
  tax          Decimal?    @db.Decimal(10, 2)
  shipping     Decimal?    @db.Decimal(10, 2)
  discount     Decimal?    @db.Decimal(10, 2)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  notes        String?
  userId       String?
  customerId   String?
  storeId      String
  couponId     String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  user      User?       @relation(fields: [userId], references: [id])
  customer  Customer?   @relation(fields: [customerId], references: [id])
  store     Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  coupon    Coupon?     @relation(fields: [couponId], references: [id])
  items     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  orderId   String
  productId String

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Coupon {
  id          String     @id @default(cuid())
  code        String     @unique
  type        CouponType
  value       Decimal    @db.Decimal(10, 2)
  minAmount   Decimal?   @db.Decimal(10, 2)
  maxDiscount Decimal?   @db.Decimal(10, 2)
  usageLimit  Int?
  usedCount   Int        @default(0)
  expiresAt   DateTime?
  isActive    Boolean    @default(true)
  storeId     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  store  Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("coupons")
}

model Message {
  id         String        @id @default(cuid())
  type       MessageType   @default(SMS)
  content    String
  recipients String[]
  status     MessageStatus @default(PENDING)
  sentAt     DateTime?
  userId     String
  storeId    String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Wallet {
  id        String   @id @default(cuid())
  balance   Decimal  @default(0) @db.Decimal(10, 2)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model Transaction {
  id          String            @id @default(cuid())
  type        TransactionType
  amount      Decimal           @db.Decimal(10, 2)
  status      TransactionStatus @default(PENDING)
  description String?
  reference   String?
  userId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Analytics {
  id         String   @id @default(cuid())
  date       DateTime
  views      Int      @default(0)
  orders     Int      @default(0)
  sales      Decimal  @default(0) @db.Decimal(10, 2)
  customers  Int      @default(0)
  storeId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([date, storeId])
  @@map("analytics")
}

model Referral {
  id          String        @id @default(cuid())
  code        String        @unique
  referrerId  String
  refereeId   String?
  status      ReferralStatus @default(PENDING)
  commission  Decimal?      @db.Decimal(10, 2)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  referrer User  @relation(fields: [referrerId], references: [id], onDelete: Cascade)

  @@map("referrals")
}

model DeliveryInfo {
  id              String   @id @default(cuid())
  freeDelivery    Boolean  @default(false)
  deliveryFee     Decimal? @db.Decimal(10, 2)
  minOrderAmount  Decimal? @db.Decimal(10, 2)
  deliveryRadius  Int?
  estimatedTime   String?
  storeId         String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("delivery_info")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum StoreStatus {
  ACTIVE
  PAUSED
  SUSPENDED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum CouponType {
  FIXED
  PERCENTAGE
}

enum MessageType {
  SMS
  EMAIL
  PUSH
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}

enum TransactionType {
  CREDIT
  DEBIT
  WITHDRAWAL
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum ReferralStatus {
  PENDING
  COMPLETED
  EXPIRED
}
